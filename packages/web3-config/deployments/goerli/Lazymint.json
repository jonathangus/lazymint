{
  "address": "0xc192F32969B88ba5d3aA0a01007056Bc8C307847",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "lastChecked",
          "type": "string"
        }
      ],
      "name": "RequestVolume",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addWatcher",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressesToVerify",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "batchVerify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastChecked",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        }
      ],
      "name": "requestVolumeData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "uintToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "volume",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "watchers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32415690c57cfd1b14b09051fe438d4465d270097b6f2ae12ccec1cfbe9e0b55",
  "receipt": {
    "to": null,
    "from": "0x4269f41Fa8440CdbD1A919eEd9414bF96BDFB5eE",
    "contractAddress": "0x3BAFD07c5fe9B69460F575FBa0f116DA27244Ab2",
    "transactionIndex": 2,
    "gasUsed": "2801765",
    "logsBloom": "0x
    "blockHash": "0x8124ff6eea6decef1d15eddd3aea71192f71b93002ae1f15769e34fea220dd0a",
    "transactionHash": "0x32415690c57cfd1b14b09051fe438d4465d270097b6f2ae12ccec1cfbe9e0b55",
    "logs": [],
    "blockNumber": 7978280,
    "cumulativeGasUsed": "5190706",
    "status": 1,
    "byzantium": true
  },
  "args": [1],
  "numDeployments": 1,
  "solcInputHash": "5908972e116454d79c8871e916aa9908",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lastChecked\",\"type\":\"string\"}],\"name\":\"RequestVolume\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addWatcher\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressesToVerify\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"batchVerify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastChecked\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"requestVolumeData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"uintToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"volume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"watchers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"interval()\":{\"notice\":\"Use an interval in seconds and a timestamp to slow execution of Upkeep\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"withdrawLink()\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lazymint.sol\":\"Lazymint\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"contracts/Lazymint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@chainlink/contracts/src/v0.8/AutomationCompatible.sol';\\nimport '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\nimport '@chainlink/contracts/src/v0.8/ConfirmedOwner.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\ncontract Lazymint is\\n    AutomationCompatibleInterface,\\n    ChainlinkClient,\\n    ConfirmedOwner\\n{\\n    using Chainlink for Chainlink.Request;\\n\\n    uint256 public volume;\\n    bytes32 private jobId;\\n    uint256 private fee;\\n    bool public approved;\\n\\n    event RequestVolume(\\n        bytes32 indexed requestId,\\n        bool approved,\\n        string lastChecked\\n    );\\n    uint256 public counter;\\n\\n    /**\\n     * Use an interval in seconds and a timestamp to slow execution of Upkeep\\n     */\\n    uint256 public immutable interval;\\n    uint256 public lastTimeStamp;\\n\\n    address[] public addressesToVerify;\\n\\n    mapping(address => bool) public watchers;\\n    mapping(bytes32 => address) private responseID;\\n\\n    constructor(uint256 updateInterval) ConfirmedOwner(msg.sender) {\\n        setChainlinkToken(0xf97f4df75117a78c1A5a0DBb814Af92458539FB4);\\n        setChainlinkOracle(0xCC79157eb46F5624204f47AB42b3906cAA40eaB7);\\n        jobId = 'c1c5e92880894eb6b27d3cae19670aa3';\\n        fee = (1 * LINK_DIVISIBILITY) / 10; // 0,1 * 10**18 (Varies by network and job)\\n        interval = updateInterval;\\n        lastTimeStamp = block.timestamp;\\n        counter = 0;\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\\n        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\\n    }\\n\\n    function addWatcher() public {\\n        watchers[msg.sender] = true;\\n        addressesToVerify.push(msg.sender);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        //We highly recommend revalidating the upkeep in the performUpkeep function\\n        if ((block.timestamp - lastTimeStamp) > interval) {\\n            lastTimeStamp = block.timestamp;\\n            counter = counter + 1;\\n            batchVerify();\\n        }\\n\\n        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function\\n    }\\n\\n    string public lastChecked;\\n\\n    function batchVerify() public {\\n        for (uint256 i = 0; i < addressesToVerify.length; i++) {\\n            address currentWallet = addressesToVerify[i];\\n            requestVolumeData(currentWallet);\\n        }\\n    }\\n\\n    function toAsciiString(address x) internal pure returns (string memory) {\\n        bytes memory s = new bytes(40);\\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n            bytes1 hi = bytes1(uint8(b) / 16);\\n            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n            s[2 * i] = char(hi);\\n            s[2 * i + 1] = char(lo);\\n        }\\n        return string(s);\\n    }\\n\\n    function char(bytes1 b) internal pure returns (bytes1 c) {\\n        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n        else return bytes1(uint8(b) + 0x57);\\n    }\\n\\n    function uintToString(uint256 _value) public pure returns (string memory) {\\n        bytes32 _bytes = bytes32(_value);\\n        bytes memory HEX = '0123456789abcdef';\\n        bytes memory _string = new bytes(42);\\n        _string[0] = '0';\\n        _string[1] = 'x';\\n        for (uint256 i = 0; i < 20; i++) {\\n            _string[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\\n            _string[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\\n        }\\n        return string(_string);\\n    }\\n\\n    function buildUrl(address _wallet) internal pure returns (string memory) {\\n        return\\n            string.concat(\\n                'https://lazymint-chainlink.vercel.app/api/poap?address=',\\n                toAsciiString(_wallet)\\n            );\\n    }\\n\\n    function removeAddress(uint256 index) internal {\\n        if (index >= addressesToVerify.length) return;\\n\\n        addressesToVerify[index] = addressesToVerify[\\n            addressesToVerify.length - 1\\n        ];\\n        addressesToVerify.pop();\\n    }\\n\\n    function requestVolumeData(address _wallet)\\n        public\\n        returns (bytes32 requestId)\\n    {\\n        Chainlink.Request memory req = buildChainlinkRequest(\\n            jobId,\\n            address(this),\\n            this.fulfill.selector\\n        );\\n        string memory url = buildUrl(_wallet);\\n        // Set the URL to perform the GET request on\\n        req.add('get', url);\\n        req.add('path', 'success');\\n        // Sends the request\\n        //todo add sendChainlinkRequest(req, fee) and wallet addy to mapping\\n        bytes32 response = sendChainlinkRequest(req, fee);\\n        responseID[response] = _wallet;\\n        return response;\\n    }\\n\\n    function fulfill(bytes32 _requestId, bool _approved)\\n        public\\n        recordChainlinkFulfillment(_requestId)\\n    {\\n        address mintTo = responseID[_requestId];\\n        if (_approved = true) {\\n            execute(mintTo);\\n\\n            for (uint256 i = 0; i < addressesToVerify.length; i++) {\\n                if (mintTo == addressesToVerify[i]) {\\n                    removeAddress(i);\\n                }\\n            }\\n        }\\n        emit RequestVolume(_requestId, _approved, lastChecked);\\n    }\\n\\n    function execute(address account) internal virtual {}\\n\\n    /**\\n     * Allow withdraw of Link tokens from the contract\\n     */\\n    function withdrawLink() public onlyOwner {\\n        LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n        require(\\n            link.transfer(msg.sender, link.balanceOf(address(this))),\\n            'Unable to transfer'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x02fb29820d768b5fcbb70df68fc31a9aa2bf54f8d45f320a10333e8858de4748\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016004553480156200001657600080fd5b50604051620034d5380380620034d583398181016040528101906200003c9190620003ef565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a89062000482565b60405180910390fd5b81600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161462000139576200013881620001f660201b60201c565b5b5050506200016173f97f4df75117a78c1a5a0dbb814af92458539fb46200032760201b60201c565b6200018673cc79157eb46f5624204f47ab42b3906caa40eab76200036b60201b60201c565b7f6331633565393238383038393465623662323764336361653139363730616133600981905550600a670de0b6b3a76400006001620001c69190620004d3565b620001d2919062000563565b600a81905550806080818152505042600d819055506000600c81905550506200060d565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000267576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200025e90620005eb565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b6000819050919050565b620003c981620003b4565b8114620003d557600080fd5b50565b600081519050620003e981620003be565b92915050565b600060208284031215620004085762000407620003af565b5b60006200041884828501620003d8565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b60006200046a60188362000421565b9150620004778262000432565b602082019050919050565b600060208201905081810360008301526200049d816200045b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620004e082620003b4565b9150620004ed83620003b4565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620005295762000528620004a4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200057082620003b4565b91506200057d83620003b4565b92508262000590576200058f62000534565b5b828204905092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620005d360178362000421565b9150620005e0826200059b565b602082019050919050565b600060208201905081810360008301526200060681620005c4565b9050919050565b608051612e9e6200063760003960008181610433015281816104bb015261095e0152612e9e6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806379ba5097116100ad578063c618a1e411610071578063c618a1e4146102c1578063e5ada13e146102df578063e9395679146102fd578063f2fde38b1461032d578063fd68990a1461034957610121565b806379ba5097146102675780638da5cb5b146102715780638dc654a21461028f578063947a36fb14610299578063b3c6435f146102b757610121565b80634585e33b116100f45780634585e33b1461019c578063596150d7146101b857806361bc221a146101e85780636e04ff0d14610206578063782773171461023757610121565b80630f6cee491461012657806319d40b08146101305780632002a0c01461014e5780633f3b3b271461017e575b600080fd5b61012e610365565b005b6101386103d9565b6040516101459190611e0f565b60405180910390f35b61016860048036038101906101639190611e6a565b6103ec565b6040516101759190611ed8565b60405180910390f35b61018661042b565b6040516101939190611f02565b60405180910390f35b6101b660048036038101906101b19190611f82565b610431565b005b6101d260048036038101906101cd9190611ffb565b61048f565b6040516101df9190611e0f565b60405180910390f35b6101f06104af565b6040516101fd9190611f02565b60405180910390f35b610220600480360381019061021b9190611f82565b6104b5565b60405161022e9291906120c1565b60405180910390f35b610251600480360381019061024c9190611ffb565b6104f2565b60405161025e919061210a565b60405180910390f35b61026f61064e565b005b6102796107e5565b6040516102869190611ed8565b60405180910390f35b61029761080f565b005b6102a161095c565b6040516102ae9190611f02565b60405180910390f35b6102bf610980565b005b6102c9610a3d565b6040516102d69190611f02565b60405180910390f35b6102e7610a43565b6040516102f4919061217a565b60405180910390f35b61031760048036038101906103129190611e6a565b610ad1565b604051610324919061217a565b60405180910390f35b61034760048036038101906103429190611ffb565b610dc6565b005b610363600480360381019061035e91906121f4565b610dda565b005b60005b600e805490508110156103d6576000600e828154811061038b5761038a612234565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506103c1816104f2565b505080806103ce90612292565b915050610368565b50565b600b60009054906101000a900460ff1681565b600e81815481106103fc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b7f0000000000000000000000000000000000000000000000000000000000000000600d544261046091906122da565b111561048b5742600d819055506001600c5461047c919061230e565b600c8190555061048a610365565b5b5050565b600f6020528060005260406000206000915054906101000a900460ff1681565b600c5481565b600060607f0000000000000000000000000000000000000000000000000000000000000000600d54426104e891906122da565b1191509250929050565b6000806105096009543063fd68990a60e01b61100b565b905060006105168461103c565b90506105626040518060400160405280600381526020017f6765740000000000000000000000000000000000000000000000000000000000815250828461106d9092919063ffffffff16565b6105e16040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f73756363657373000000000000000000000000000000000000000000000000008152508461106d9092919063ffffffff16565b60006105ef83600a546110a0565b9050846010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809350505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d5906123b0565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108176110d7565b6000610821611169565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108799190611ed8565b602060405180830381865afa158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba91906123e5565b6040518363ffffffff1660e01b81526004016108d7929190612412565b6020604051808303816000875af11580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190612450565b610959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610950906124c9565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600e339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60085481565b60118054610a5090612518565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7c90612518565b8015610ac95780601f10610a9e57610100808354040283529160200191610ac9565b820191906000526020600020905b815481529060010190602001808311610aac57829003601f168201915b505050505081565b606060008260001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610b3257610b31612549565b5b6040519080825280601f01601f191660200182016040528015610b645781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b9c57610b9b612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c0057610bff612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610dba5782600485600c84610c4c919061230e565b60208110610c5d57610c5c612234565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610c9c57610c9b612234565b5b602001015160f81c60f81b82600283610cb59190612578565b6002610cc1919061230e565b81518110610cd257610cd1612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c84610d15919061230e565b60208110610d2657610d25612234565b5b1a60f81b1660f81c60ff1681518110610d4257610d41612234565b5b602001015160f81c60f81b82600283610d5b9190612578565b6003610d67919061230e565b81518110610d7857610d77612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610db290612292565b915050610c32565b50809350505050919050565b610dce6110d7565b610dd781611193565b50565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7390612644565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a260006010600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600192508215610fca57610f2a816112c1565b60005b600e80549050811015610fc857600e8181548110610f4e57610f4d612234565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fb557610fb4816112c4565b5b8080610fc090612292565b915050610f2d565b505b837f2a59adc454390ac082968c8c50e27a9901b5266815783beaea3e73e7cf992d4f846011604051610ffd9291906126f9565b60405180910390a250505050565b611013611d6d565b61101b611d6d565b611032858585846113c8909392919063ffffffff16565b9150509392505050565b606061104782611478565b60405160200161105791906127d7565b6040516020818303038152906040529050919050565b61108482846080015161163b90919063ffffffff16565b61109b81846080015161163b90919063ffffffff16565b505050565b60006110cf600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484611660565b905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90612845565b60405180910390fd5b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f8906128b1565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b50565b600e805490508110156113c557600e6001600e805490506112e591906122da565b815481106112f6576112f5612234565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e828154811061133557611334612234565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e80548061138f5761138e6128d1565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b50565b6113d0611d6d565b6113e0856080015161010061172c565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b60606000602867ffffffffffffffff81111561149757611496612549565b5b6040519080825280601f01601f1916602001820160405280156114c95781602001600182028036833780820191505090505b50905060005b60148110156116315760008160136114e791906122da565b60086114f39190612578565b60026114ff9190612a33565b8573ffffffffffffffffffffffffffffffffffffffff166115209190612aad565b60f81b9050600060108260f81c6115379190612aeb565b60f81b905060008160f81c601061154e9190612b1c565b8360f81c61155c9190612b57565b60f81b905061156a82611796565b858560026115789190612578565b8151811061158957611588612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506115c181611796565b8560018660026115d19190612578565b6115db919061230e565b815181106115ec576115eb612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061162990612292565b9150506114cf565b5080915050919050565b61164882600383516117dc565b61165b818361196190919063ffffffff16565b505050565b6000806004549050600181611675919061230e565b6004819055506000634042994660e01b60008087600001513089604001518760018c60800151600001516040516024016116b6989796959493929190612bc6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061172186838684611983565b925050509392505050565b611734611dda565b60006020836117439190612c4b565b1461176f576020826117559190612c4b565b602061176191906122da565b8261176c919061230e565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6000600a8260f81c60ff1610156117c15760308260f81c6117b79190612c7c565b60f81b90506117d7565b60578260f81c6117d19190612c7c565b60f81b90505b919050565b60178167ffffffffffffffff16116118135761180d8160058460ff16901b60ff161784611b1890919063ffffffff16565b5061195c565b60ff8167ffffffffffffffff161161186957611842601860058460ff16901b1784611b1890919063ffffffff16565b506118638167ffffffffffffffff16600185611b389092919063ffffffff16565b5061195b565b61ffff8167ffffffffffffffff16116118c057611899601960058460ff16901b1784611b1890919063ffffffff16565b506118ba8167ffffffffffffffff16600285611b389092919063ffffffff16565b5061195a565b63ffffffff8167ffffffffffffffff1611611919576118f2601a60058460ff16901b1784611b1890919063ffffffff16565b506119138167ffffffffffffffff16600485611b389092919063ffffffff16565b50611959565b611936601b60058460ff16901b1784611b1890919063ffffffff16565b506119578167ffffffffffffffff16600885611b389092919063ffffffff16565b505b5b5b5b505050565b611969611dda565b61197b83846000015151848551611b5a565b905092915050565b60003084604051602001611998929190612d6c565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401611a8e93929190612d98565b6020604051808303816000875af1158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad19190612450565b611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0790612e48565b60405180910390fd5b949350505050565b611b20611dda565b611b308384600001515184611c49565b905092915050565b611b40611dda565b611b51848560000151518585611c9f565b90509392505050565b611b62611dda565b8251821115611b7057600080fd5b84602001518285611b81919061230e565b1115611bb657611bb5856002611ba688602001518887611ba1919061230e565b611d2d565b611bb09190612578565b611d49565b5b600080865180518760208301019350808887011115611bd55787860182525b60208701925050505b60208410611c1c5780518252602082611bf7919061230e565b9150602081611c06919061230e565b9050602084611c1591906122da565b9350611bde565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b611c51611dda565b83602001518310611c7757611c768460028660200151611c719190612578565b611d49565b5b83518051602085830101848153818603611c92576001820183525b5050508390509392505050565b611ca7611dda565b84602001518483611cb8919061230e565b1115611ce057611cdf8560028685611cd0919061230e565b611cda9190612578565b611d49565b5b6000600183610100611cf29190612a33565b611cfc91906122da565b90508551838682010185831982511617815281518588011115611d1f5784870182525b505085915050949350505050565b600081831115611d3f57829050611d43565b8190505b92915050565b600082600001519050611d5c838361172c565b50611d678382611961565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001611dd4611dda565b81525090565b604051806040016040528060608152602001600081525090565b60008115159050919050565b611e0981611df4565b82525050565b6000602082019050611e246000830184611e00565b92915050565b600080fd5b600080fd5b6000819050919050565b611e4781611e34565b8114611e5257600080fd5b50565b600081359050611e6481611e3e565b92915050565b600060208284031215611e8057611e7f611e2a565b5b6000611e8e84828501611e55565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ec282611e97565b9050919050565b611ed281611eb7565b82525050565b6000602082019050611eed6000830184611ec9565b92915050565b611efc81611e34565b82525050565b6000602082019050611f176000830184611ef3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f4257611f41611f1d565b5b8235905067ffffffffffffffff811115611f5f57611f5e611f22565b5b602083019150836001820283011115611f7b57611f7a611f27565b5b9250929050565b60008060208385031215611f9957611f98611e2a565b5b600083013567ffffffffffffffff811115611fb757611fb6611e2f565b5b611fc385828601611f2c565b92509250509250929050565b611fd881611eb7565b8114611fe357600080fd5b50565b600081359050611ff581611fcf565b92915050565b60006020828403121561201157612010611e2a565b5b600061201f84828501611fe6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612062578082015181840152602081019050612047565b83811115612071576000848401525b50505050565b6000601f19601f8301169050919050565b600061209382612028565b61209d8185612033565b93506120ad818560208601612044565b6120b681612077565b840191505092915050565b60006040820190506120d66000830185611e00565b81810360208301526120e88184612088565b90509392505050565b6000819050919050565b612104816120f1565b82525050565b600060208201905061211f60008301846120fb565b92915050565b600081519050919050565b600082825260208201905092915050565b600061214c82612125565b6121568185612130565b9350612166818560208601612044565b61216f81612077565b840191505092915050565b600060208201905081810360008301526121948184612141565b905092915050565b6121a5816120f1565b81146121b057600080fd5b50565b6000813590506121c28161219c565b92915050565b6121d181611df4565b81146121dc57600080fd5b50565b6000813590506121ee816121c8565b92915050565b6000806040838503121561220b5761220a611e2a565b5b6000612219858286016121b3565b925050602061222a858286016121df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061229d82611e34565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122cf576122ce612263565b5b600182019050919050565b60006122e582611e34565b91506122f083611e34565b92508282101561230357612302612263565b5b828203905092915050565b600061231982611e34565b915061232483611e34565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561235957612358612263565b5b828201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061239a601683612130565b91506123a582612364565b602082019050919050565b600060208201905081810360008301526123c98161238d565b9050919050565b6000815190506123df81611e3e565b92915050565b6000602082840312156123fb576123fa611e2a565b5b6000612409848285016123d0565b91505092915050565b60006040820190506124276000830185611ec9565b6124346020830184611ef3565b9392505050565b60008151905061244a816121c8565b92915050565b60006020828403121561246657612465611e2a565b5b60006124748482850161243b565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b60006124b3601283612130565b91506124be8261247d565b602082019050919050565b600060208201905081810360008301526124e2816124a6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061253057607f821691505b602082108103612543576125426124e9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061258382611e34565b915061258e83611e34565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125c7576125c6612263565b5b828202905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b600061262e602883612130565b9150612639826125d2565b604082019050919050565b6000602082019050818103600083015261265d81612621565b9050919050565b60008190508160005260206000209050919050565b6000815461268681612518565b6126908186612130565b945060018216600081146126ab57600181146126bd576126f0565b60ff19831686526020860193506126f0565b6126c685612664565b60005b838110156126e8578154818901526001820191506020810190506126c9565b808801955050505b50505092915050565b600060408201905061270e6000830185611e00565b81810360208301526127208184612679565b90509392505050565b600081905092915050565b7f68747470733a2f2f6c617a796d696e742d636861696e6c696e6b2e766572636560008201527f6c2e6170702f6170692f706f61703f616464726573733d000000000000000000602082015250565b6000612790603783612729565b915061279b82612734565b603782019050919050565b60006127b182612125565b6127bb8185612729565b93506127cb818560208601612044565b80840191505092915050565b60006127e282612783565b91506127ee82846127a6565b915081905092915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b600061282f601683612130565b915061283a826127f9565b602082019050919050565b6000602082019050818103600083015261285e81612822565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061289b601783612130565b91506128a682612865565b602082019050919050565b600060208201905081810360008301526128ca8161288e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156129575780860481111561293357612932612263565b5b60018516156129425780820291505b808102905061295085612900565b9450612917565b94509492505050565b6000826129705760019050612a2c565b8161297e5760009050612a2c565b8160018114612994576002811461299e576129cd565b6001915050612a2c565b60ff8411156129b0576129af612263565b5b8360020a9150848211156129c7576129c6612263565b5b50612a2c565b5060208310610133831016604e8410600b8410161715612a025782820a9050838111156129fd576129fc612263565b5b612a2c565b612a0f848484600161290d565b92509050818404811115612a2657612a25612263565b5b81810290505b9392505050565b6000612a3e82611e34565b9150612a4983611e34565b9250612a767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612960565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ab882611e34565b9150612ac383611e34565b925082612ad357612ad2612a7e565b5b828204905092915050565b600060ff82169050919050565b6000612af682612ade565b9150612b0183612ade565b925082612b1157612b10612a7e565b5b828204905092915050565b6000612b2782612ade565b9150612b3283612ade565b92508160ff0483118215151615612b4c57612b4b612263565b5b828202905092915050565b6000612b6282612ade565b9150612b6d83612ade565b925082821015612b8057612b7f612263565b5b828203905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612bc081612b8b565b82525050565b600061010082019050612bdc600083018b611ec9565b612be9602083018a611ef3565b612bf660408301896120fb565b612c036060830188611ec9565b612c106080830187612bb7565b612c1d60a0830186611ef3565b612c2a60c0830185611ef3565b81810360e0830152612c3c8184612088565b90509998505050505050505050565b6000612c5682611e34565b9150612c6183611e34565b925082612c7157612c70612a7e565b5b828206905092915050565b6000612c8782612ade565b9150612c9283612ade565b92508260ff03821115612ca857612ca7612263565b5b828201905092915050565b6000819050919050565b6000612cd8612cd3612cce84611e97565b612cb3565b611e97565b9050919050565b6000612cea82612cbd565b9050919050565b6000612cfc82612cdf565b9050919050565b60008160601b9050919050565b6000612d1b82612d03565b9050919050565b6000612d2d82612d10565b9050919050565b612d45612d4082612cf1565b612d22565b82525050565b6000819050919050565b612d66612d6182611e34565b612d4b565b82525050565b6000612d788285612d34565b601482019150612d888284612d55565b6020820191508190509392505050565b6000606082019050612dad6000830186611ec9565b612dba6020830185611ef3565b8181036040830152612dcc8184612088565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000612e32602383612130565b9150612e3d82612dd6565b604082019050919050565b60006020820190508181036000830152612e6181612e25565b905091905056fea2646970667358221220c0febc78156aaf11e078379ac0cf583cd3ca4a234feb7192e67aa3e4a6b515f664736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806379ba5097116100ad578063c618a1e411610071578063c618a1e4146102c1578063e5ada13e146102df578063e9395679146102fd578063f2fde38b1461032d578063fd68990a1461034957610121565b806379ba5097146102675780638da5cb5b146102715780638dc654a21461028f578063947a36fb14610299578063b3c6435f146102b757610121565b80634585e33b116100f45780634585e33b1461019c578063596150d7146101b857806361bc221a146101e85780636e04ff0d14610206578063782773171461023757610121565b80630f6cee491461012657806319d40b08146101305780632002a0c01461014e5780633f3b3b271461017e575b600080fd5b61012e610365565b005b6101386103d9565b6040516101459190611e0f565b60405180910390f35b61016860048036038101906101639190611e6a565b6103ec565b6040516101759190611ed8565b60405180910390f35b61018661042b565b6040516101939190611f02565b60405180910390f35b6101b660048036038101906101b19190611f82565b610431565b005b6101d260048036038101906101cd9190611ffb565b61048f565b6040516101df9190611e0f565b60405180910390f35b6101f06104af565b6040516101fd9190611f02565b60405180910390f35b610220600480360381019061021b9190611f82565b6104b5565b60405161022e9291906120c1565b60405180910390f35b610251600480360381019061024c9190611ffb565b6104f2565b60405161025e919061210a565b60405180910390f35b61026f61064e565b005b6102796107e5565b6040516102869190611ed8565b60405180910390f35b61029761080f565b005b6102a161095c565b6040516102ae9190611f02565b60405180910390f35b6102bf610980565b005b6102c9610a3d565b6040516102d69190611f02565b60405180910390f35b6102e7610a43565b6040516102f4919061217a565b60405180910390f35b61031760048036038101906103129190611e6a565b610ad1565b604051610324919061217a565b60405180910390f35b61034760048036038101906103429190611ffb565b610dc6565b005b610363600480360381019061035e91906121f4565b610dda565b005b60005b600e805490508110156103d6576000600e828154811061038b5761038a612234565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506103c1816104f2565b505080806103ce90612292565b915050610368565b50565b600b60009054906101000a900460ff1681565b600e81815481106103fc57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b7f0000000000000000000000000000000000000000000000000000000000000000600d544261046091906122da565b111561048b5742600d819055506001600c5461047c919061230e565b600c8190555061048a610365565b5b5050565b600f6020528060005260406000206000915054906101000a900460ff1681565b600c5481565b600060607f0000000000000000000000000000000000000000000000000000000000000000600d54426104e891906122da565b1191509250929050565b6000806105096009543063fd68990a60e01b61100b565b905060006105168461103c565b90506105626040518060400160405280600381526020017f6765740000000000000000000000000000000000000000000000000000000000815250828461106d9092919063ffffffff16565b6105e16040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280600781526020017f73756363657373000000000000000000000000000000000000000000000000008152508461106d9092919063ffffffff16565b60006105ef83600a546110a0565b9050846010600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550809350505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d5906123b0565b60405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108176110d7565b6000610821611169565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108799190611ed8565b602060405180830381865afa158015610896573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ba91906123e5565b6040518363ffffffff1660e01b81526004016108d7929190612412565b6020604051808303816000875af11580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a9190612450565b610959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610950906124c9565b60405180910390fd5b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600e339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60085481565b60118054610a5090612518565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7c90612518565b8015610ac95780601f10610a9e57610100808354040283529160200191610ac9565b820191906000526020600020905b815481529060010190602001808311610aac57829003601f168201915b505050505081565b606060008260001b905060006040518060400160405280601081526020017f303132333435363738396162636465660000000000000000000000000000000081525090506000602a67ffffffffffffffff811115610b3257610b31612549565b5b6040519080825280601f01601f191660200182016040528015610b645781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110610b9c57610b9b612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110610c0057610bff612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b6014811015610dba5782600485600c84610c4c919061230e565b60208110610c5d57610c5c612234565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60f81c60ff1681518110610c9c57610c9b612234565b5b602001015160f81c60f81b82600283610cb59190612578565b6002610cc1919061230e565b81518110610cd257610cd1612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535082600f60f81b85600c84610d15919061230e565b60208110610d2657610d25612234565b5b1a60f81b1660f81c60ff1681518110610d4257610d41612234565b5b602001015160f81c60f81b82600283610d5b9190612578565b6003610d67919061230e565b81518110610d7857610d77612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080610db290612292565b915050610c32565b50809350505050919050565b610dce6110d7565b610dd781611193565b50565b816005600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7390612644565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055807f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a60405160405180910390a260006010600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600192508215610fca57610f2a816112c1565b60005b600e80549050811015610fc857600e8181548110610f4e57610f4d612234565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610fb557610fb4816112c4565b5b8080610fc090612292565b915050610f2d565b505b837f2a59adc454390ac082968c8c50e27a9901b5266815783beaea3e73e7cf992d4f846011604051610ffd9291906126f9565b60405180910390a250505050565b611013611d6d565b61101b611d6d565b611032858585846113c8909392919063ffffffff16565b9150509392505050565b606061104782611478565b60405160200161105791906127d7565b6040516020818303038152906040529050919050565b61108482846080015161163b90919063ffffffff16565b61109b81846080015161163b90919063ffffffff16565b505050565b60006110cf600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168484611660565b905092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611167576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115e90612845565b60405180910390fd5b565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f8906128b1565b60405180910390fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b50565b600e805490508110156113c557600e6001600e805490506112e591906122da565b815481106112f6576112f5612234565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e828154811061133557611334612234565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e80548061138f5761138e6128d1565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b50565b6113d0611d6d565b6113e0856080015161010061172c565b508385600001818152505082856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508185604001907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050849050949350505050565b60606000602867ffffffffffffffff81111561149757611496612549565b5b6040519080825280601f01601f1916602001820160405280156114c95781602001600182028036833780820191505090505b50905060005b60148110156116315760008160136114e791906122da565b60086114f39190612578565b60026114ff9190612a33565b8573ffffffffffffffffffffffffffffffffffffffff166115209190612aad565b60f81b9050600060108260f81c6115379190612aeb565b60f81b905060008160f81c601061154e9190612b1c565b8360f81c61155c9190612b57565b60f81b905061156a82611796565b858560026115789190612578565b8151811061158957611588612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506115c181611796565b8560018660026115d19190612578565b6115db919061230e565b815181106115ec576115eb612234565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061162990612292565b9150506114cf565b5080915050919050565b61164882600383516117dc565b61165b818361196190919063ffffffff16565b505050565b6000806004549050600181611675919061230e565b6004819055506000634042994660e01b60008087600001513089604001518760018c60800151600001516040516024016116b6989796959493929190612bc6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061172186838684611983565b925050509392505050565b611734611dda565b60006020836117439190612c4b565b1461176f576020826117559190612c4b565b602061176191906122da565b8261176c919061230e565b91505b81836020018181525050604051808452600081528281016020016040525082905092915050565b6000600a8260f81c60ff1610156117c15760308260f81c6117b79190612c7c565b60f81b90506117d7565b60578260f81c6117d19190612c7c565b60f81b90505b919050565b60178167ffffffffffffffff16116118135761180d8160058460ff16901b60ff161784611b1890919063ffffffff16565b5061195c565b60ff8167ffffffffffffffff161161186957611842601860058460ff16901b1784611b1890919063ffffffff16565b506118638167ffffffffffffffff16600185611b389092919063ffffffff16565b5061195b565b61ffff8167ffffffffffffffff16116118c057611899601960058460ff16901b1784611b1890919063ffffffff16565b506118ba8167ffffffffffffffff16600285611b389092919063ffffffff16565b5061195a565b63ffffffff8167ffffffffffffffff1611611919576118f2601a60058460ff16901b1784611b1890919063ffffffff16565b506119138167ffffffffffffffff16600485611b389092919063ffffffff16565b50611959565b611936601b60058460ff16901b1784611b1890919063ffffffff16565b506119578167ffffffffffffffff16600885611b389092919063ffffffff16565b505b5b5b5b505050565b611969611dda565b61197b83846000015151848551611b5a565b905092915050565b60003084604051602001611998929190612d6c565b604051602081830303815290604052805190602001209050846005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af960405160405180910390a2600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634000aea08685856040518463ffffffff1660e01b8152600401611a8e93929190612d98565b6020604051808303816000875af1158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad19190612450565b611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0790612e48565b60405180910390fd5b949350505050565b611b20611dda565b611b308384600001515184611c49565b905092915050565b611b40611dda565b611b51848560000151518585611c9f565b90509392505050565b611b62611dda565b8251821115611b7057600080fd5b84602001518285611b81919061230e565b1115611bb657611bb5856002611ba688602001518887611ba1919061230e565b611d2d565b611bb09190612578565b611d49565b5b600080865180518760208301019350808887011115611bd55787860182525b60208701925050505b60208410611c1c5780518252602082611bf7919061230e565b9150602081611c06919061230e565b9050602084611c1591906122da565b9350611bde565b60006001856020036101000a03905080198251168184511681811785525050508692505050949350505050565b611c51611dda565b83602001518310611c7757611c768460028660200151611c719190612578565b611d49565b5b83518051602085830101848153818603611c92576001820183525b5050508390509392505050565b611ca7611dda565b84602001518483611cb8919061230e565b1115611ce057611cdf8560028685611cd0919061230e565b611cda9190612578565b611d49565b5b6000600183610100611cf29190612a33565b611cfc91906122da565b90508551838682010185831982511617815281518588011115611d1f5784870182525b505085915050949350505050565b600081831115611d3f57829050611d43565b8190505b92915050565b600082600001519050611d5c838361172c565b50611d678382611961565b50505050565b6040518060a0016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200160008152602001611dd4611dda565b81525090565b604051806040016040528060608152602001600081525090565b60008115159050919050565b611e0981611df4565b82525050565b6000602082019050611e246000830184611e00565b92915050565b600080fd5b600080fd5b6000819050919050565b611e4781611e34565b8114611e5257600080fd5b50565b600081359050611e6481611e3e565b92915050565b600060208284031215611e8057611e7f611e2a565b5b6000611e8e84828501611e55565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ec282611e97565b9050919050565b611ed281611eb7565b82525050565b6000602082019050611eed6000830184611ec9565b92915050565b611efc81611e34565b82525050565b6000602082019050611f176000830184611ef3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f4257611f41611f1d565b5b8235905067ffffffffffffffff811115611f5f57611f5e611f22565b5b602083019150836001820283011115611f7b57611f7a611f27565b5b9250929050565b60008060208385031215611f9957611f98611e2a565b5b600083013567ffffffffffffffff811115611fb757611fb6611e2f565b5b611fc385828601611f2c565b92509250509250929050565b611fd881611eb7565b8114611fe357600080fd5b50565b600081359050611ff581611fcf565b92915050565b60006020828403121561201157612010611e2a565b5b600061201f84828501611fe6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612062578082015181840152602081019050612047565b83811115612071576000848401525b50505050565b6000601f19601f8301169050919050565b600061209382612028565b61209d8185612033565b93506120ad818560208601612044565b6120b681612077565b840191505092915050565b60006040820190506120d66000830185611e00565b81810360208301526120e88184612088565b90509392505050565b6000819050919050565b612104816120f1565b82525050565b600060208201905061211f60008301846120fb565b92915050565b600081519050919050565b600082825260208201905092915050565b600061214c82612125565b6121568185612130565b9350612166818560208601612044565b61216f81612077565b840191505092915050565b600060208201905081810360008301526121948184612141565b905092915050565b6121a5816120f1565b81146121b057600080fd5b50565b6000813590506121c28161219c565b92915050565b6121d181611df4565b81146121dc57600080fd5b50565b6000813590506121ee816121c8565b92915050565b6000806040838503121561220b5761220a611e2a565b5b6000612219858286016121b3565b925050602061222a858286016121df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061229d82611e34565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122cf576122ce612263565b5b600182019050919050565b60006122e582611e34565b91506122f083611e34565b92508282101561230357612302612263565b5b828203905092915050565b600061231982611e34565b915061232483611e34565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561235957612358612263565b5b828201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061239a601683612130565b91506123a582612364565b602082019050919050565b600060208201905081810360008301526123c98161238d565b9050919050565b6000815190506123df81611e3e565b92915050565b6000602082840312156123fb576123fa611e2a565b5b6000612409848285016123d0565b91505092915050565b60006040820190506124276000830185611ec9565b6124346020830184611ef3565b9392505050565b60008151905061244a816121c8565b92915050565b60006020828403121561246657612465611e2a565b5b60006124748482850161243b565b91505092915050565b7f556e61626c6520746f207472616e736665720000000000000000000000000000600082015250565b60006124b3601283612130565b91506124be8261247d565b602082019050919050565b600060208201905081810360008301526124e2816124a6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061253057607f821691505b602082108103612543576125426124e9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600061258382611e34565b915061258e83611e34565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156125c7576125c6612263565b5b828202905092915050565b7f536f75726365206d75737420626520746865206f7261636c65206f662074686560008201527f2072657175657374000000000000000000000000000000000000000000000000602082015250565b600061262e602883612130565b9150612639826125d2565b604082019050919050565b6000602082019050818103600083015261265d81612621565b9050919050565b60008190508160005260206000209050919050565b6000815461268681612518565b6126908186612130565b945060018216600081146126ab57600181146126bd576126f0565b60ff19831686526020860193506126f0565b6126c685612664565b60005b838110156126e8578154818901526001820191506020810190506126c9565b808801955050505b50505092915050565b600060408201905061270e6000830185611e00565b81810360208301526127208184612679565b90509392505050565b600081905092915050565b7f68747470733a2f2f6c617a796d696e742d636861696e6c696e6b2e766572636560008201527f6c2e6170702f6170692f706f61703f616464726573733d000000000000000000602082015250565b6000612790603783612729565b915061279b82612734565b603782019050919050565b60006127b182612125565b6127bb8185612729565b93506127cb818560208601612044565b80840191505092915050565b60006127e282612783565b91506127ee82846127a6565b915081905092915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b600061282f601683612130565b915061283a826127f9565b602082019050919050565b6000602082019050818103600083015261285e81612822565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061289b601783612130565b91506128a682612865565b602082019050919050565b600060208201905081810360008301526128ca8161288e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156129575780860481111561293357612932612263565b5b60018516156129425780820291505b808102905061295085612900565b9450612917565b94509492505050565b6000826129705760019050612a2c565b8161297e5760009050612a2c565b8160018114612994576002811461299e576129cd565b6001915050612a2c565b60ff8411156129b0576129af612263565b5b8360020a9150848211156129c7576129c6612263565b5b50612a2c565b5060208310610133831016604e8410600b8410161715612a025782820a9050838111156129fd576129fc612263565b5b612a2c565b612a0f848484600161290d565b92509050818404811115612a2657612a25612263565b5b81810290505b9392505050565b6000612a3e82611e34565b9150612a4983611e34565b9250612a767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612960565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612ab882611e34565b9150612ac383611e34565b925082612ad357612ad2612a7e565b5b828204905092915050565b600060ff82169050919050565b6000612af682612ade565b9150612b0183612ade565b925082612b1157612b10612a7e565b5b828204905092915050565b6000612b2782612ade565b9150612b3283612ade565b92508160ff0483118215151615612b4c57612b4b612263565b5b828202905092915050565b6000612b6282612ade565b9150612b6d83612ade565b925082821015612b8057612b7f612263565b5b828203905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612bc081612b8b565b82525050565b600061010082019050612bdc600083018b611ec9565b612be9602083018a611ef3565b612bf660408301896120fb565b612c036060830188611ec9565b612c106080830187612bb7565b612c1d60a0830186611ef3565b612c2a60c0830185611ef3565b81810360e0830152612c3c8184612088565b90509998505050505050505050565b6000612c5682611e34565b9150612c6183611e34565b925082612c7157612c70612a7e565b5b828206905092915050565b6000612c8782612ade565b9150612c9283612ade565b92508260ff03821115612ca857612ca7612263565b5b828201905092915050565b6000819050919050565b6000612cd8612cd3612cce84611e97565b612cb3565b611e97565b9050919050565b6000612cea82612cbd565b9050919050565b6000612cfc82612cdf565b9050919050565b60008160601b9050919050565b6000612d1b82612d03565b9050919050565b6000612d2d82612d10565b9050919050565b612d45612d4082612cf1565b612d22565b82525050565b6000819050919050565b612d66612d6182611e34565b612d4b565b82525050565b6000612d788285612d34565b601482019150612d888284612d55565b6020820191508190509392505050565b6000606082019050612dad6000830186611ec9565b612dba6020830185611ef3565b8181036040830152612dcc8184612088565b9050949350505050565b7f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160008201527f636c650000000000000000000000000000000000000000000000000000000000602082015250565b6000612e32602383612130565b9150612e3d82612dd6565b604082019050919050565b60006020820190508181036000830152612e6181612e25565b905091905056fea2646970667358221220c0febc78156aaf11e078379ac0cf583cd3ca4a234feb7192e67aa3e4a6b515f664736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "interval()": {
        "notice": "Use an interval in seconds and a timestamp to slow execution of Upkeep"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "withdrawLink()": {
        "notice": "Allow withdraw of Link tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 358,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1214"
      },
      {
        "astId": 360,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 363,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1309"
      },
      {
        "astId": 366,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1389"
      },
      {
        "astId": 369,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 373,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 928,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 930,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4609,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "volume",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4611,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "jobId",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 4613,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "fee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 4615,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "approved",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 4625,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "counter",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 4630,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 4633,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "addressesToVerify",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4637,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "watchers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4641,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "responseID",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4756,
        "contract": "contracts/Lazymint.sol:Lazymint",
        "label": "lastChecked",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1214": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1309": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1389": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
